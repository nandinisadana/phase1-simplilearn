ARITHEMETIC CALCULATOR :

SOURCE CODE:

package assignments;

import java.util.Scanner;

public class ArithmeticCalculator {

	public static void main(String[] args) {
		//declaration and initialization 
   	 int a,b,choice;
        float result=0;
        
        //scanner class object to read values
        Scanner scan=new Scanner(System.in); 
         
        System.out.print("Enter first number: ");
        a=scan.nextInt();
        System.out.print("Enter second number: ");
        b=scan.nextInt();
         
        System.out.print("\n1. Addition \n2. Subtraction \n3. Multiplication \n4. Division \n5. Modulo \n6. Exit Program");
        	          
        System.out.print("\nEnter your choice(1/2/3/4/5/6) ");
        choice=scan.nextInt();
         
        switch(choice)
        {
            case 1:
                result=(a+b); break;
            case 2:
                result=(a-b); break;
            case 3:
                result=(a*b); break;
            case 4:
                result=(float)((float)a/(float)b); break;
            case 5:
                result=(a%b); break;
            default:
                System.out.println("An Invalid Choice!!!\n");
        }
        if(choice>=1 && choice<=5)
           System.out.println("The Result is: " + result);
         
    }
}

	
OUTPUT:

Enter first number: 12
Enter second number: 21

1. Addition 
2. Subtraction 
3. Multiplication 
4. Division 
5. Modulo 
6. Exit Program
Enter your choice(1/2/3/4/5/6) 1
The Result is: 33.0

FILE HANDLING:

SOURCE CODE:

package assignments;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.StringTokenizer;

public class FileHandling {

	public static void main(String[] args) {
		 Scanner strInput = new Scanner(System.in);
	        String choice,cont = "y";        
	        
	        while( cont.equalsIgnoreCase("y") ) {        	
	        	   System.out.println("\t\t Employee Information System\n\n");
	        
		        System.out.println("1 ===> Add New Employee Record ");
		        System.out.println("2 ===> View All Employee Record ");	
		        System.out.println("3 ===> Delete Employee Record ");
		        System.out.println("4 ===> Search Specific Record ");
		        System.out.println("5 ===> Update Specific Record ");	        
		    
		        System.out.print("\n\n");
		        System.out.println("Enter your choice: ");
		        choice = strInput.nextLine();
		        
		        if( choice.equals("1") ) {
		        		try {
							AddRecord();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		        } else if( choice.equals("2") ) {
		        		try {
							ViewAllRecord();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		        } else if( choice.equals("3") ) {
		        		try {
							DeleteRecordByID();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		        }	else if( choice.equals("4") ) {
		        		try {
							SearchRecordbyID();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		        }	else if( choice.equals("5") ) {
		        		try {
							updateRecordbyID();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		        }	
			        	
		        System.out.println("Do you want to continue? Y/N");
		        cont = strInput.nextLine();
		       	
	        }

	}
	
	  public static void AddRecord() throws IOException {
  		
  		BufferedWriter bw = new BufferedWriter( new FileWriter("records.txt",true) );
  		Scanner strInput = new Scanner(System.in);
  		
  		String ID, name, age, addr;
  		
  		System.out.print("Enter the Employee ID: ");
  		ID = strInput.nextLine();
  		System.out.print("Enter the Employee Name: ");
  		name = strInput.nextLine();
  		System.out.print("Enter the Employee Age: ");
  		age = strInput.nextLine();
  		System.out.print("Enter the Employee Address: ");
  		addr = strInput.nextLine();    		
  		   		
  		bw.write(ID+","+name+","+age+","+addr);
  		bw.flush();
  		bw.newLine();
  		bw.close();		
  	
  }
	  
	  
	 
	    
	
	public static void ViewAllRecord() throws IOException {
	    	BufferedReader br = new BufferedReader( new FileReader("records.txt") );
	    		
	    	String record;
	    		
	    	System.out.println(" ------------------------------------------------------------- ");
	    	System.out.println("|	ID		Name 				Age			Address 		  |");
	    	System.out.println(" ------------------------------------------------------------- ");
	    		
	    	while( ( record = br.readLine() ) != null ) {
	    			
	    		StringTokenizer st = new StringTokenizer(record,",");
	    			
	    		System.out.println("|	"+st.nextToken()+"	"+st.nextToken()+" 		"+st.nextToken()+"			"+st.nextToken()+"      |");
		
	    	}
	    		
	    	System.out.println("|	                                            	          |");
	    	System.out.println(" ------------------------------------------------------------- ");
	    	br.close();    		
	    		
	    }

	
	
	public static void DeleteRecordByID() throws IOException {
	    		Scanner strInput =  new Scanner(System.in);
	    		String ID, record;
	    		
	    		
	    		File tempDB = new File("records_temp.txt");
	    		File db = new File("records.txt");
	    		
	    		
	    		BufferedReader br = new BufferedReader( new FileReader( db ) );
	    		BufferedWriter bw = new BufferedWriter( new FileWriter( tempDB ) );
	    		
	    		
	    		System.out.println("\t\t Delete Employee Record\n");
	    		
	    		System.out.println("Enter the Employee ID: ");
	    		ID =  strInput.nextLine();
	    		
	    		
	    		while( ( record = br.readLine() ) != null ) {
	    			
	    			
	    			if( record.contains(ID) ) 
	    				continue;
	   
	    			bw.write(record);
	    			bw.flush();
	    			bw.newLine();
	 
	    		}
	    		
	    		br.close();
	    		bw.close();
	    		
	    		db.delete();
	    		
	    		tempDB.renameTo(db);

	    }
	

	public static void SearchRecordbyID() throws IOException {
	    		String ID,record;
	    		Scanner strInput = new Scanner(System.in);
	    		
	    		BufferedReader br = new BufferedReader( new FileReader("records.txt") );
	    		
	    		System.out.println("\t\t Search Employee Record\n");
	    	
	    		
	    		System.out.println("Enter the Employee ID: ");
	    		ID = strInput.nextLine();
	    		
	    		System.out.println(" ------------------------------------------------------------- ");
	    		System.out.println("|	ID		Name 				Age			Address 		  |");
	    		System.out.println(" ------------------------------------------------------------- ");
	    		
	    		while( ( record = br.readLine() ) != null ) {
	    			
	    			StringTokenizer st = new StringTokenizer(record,",");
	    			if( record.contains(ID) ) {
	    				System.out.println("|	"+st.nextToken()+"	"+st.nextToken()+" 		"+st.nextToken()+"			"+st.nextToken()+"      |");
	    			}
	    			
	    			
	    			
	    		}
	    		
	    		System.out.println("|	                                            	          |");
	    		System.out.println(" ------------------------------------------------------------- ");
	    		
	    		br.close();
	    		
	    		
	    		
	    }
	
	
	public static void updateRecordbyID() throws IOException {
	    		String newName, newAge, newAddr, record, ID,record2;
	    		
	    		File db = new File("records.txt");
	    		File tempDB = new File("records_temp.txt");
	    		
	    		BufferedReader br = new BufferedReader( new FileReader(db) );
	    		BufferedWriter bw = new BufferedWriter( new FileWriter(tempDB) );
	    		    		
	    		Scanner strInput = new Scanner(System.in);
	    		
	    		System.out.println("\t\t Update Employee Record\n\n");   
			/**/		
				System.out.println("Enter the Employee ID: ");
		    		ID = strInput.nextLine();	    		
		    		System.out.println(" ------------------------------------------------------------- ");
		    		System.out.println("|	ID		Name 				Age			Address 		  |");
		    		System.out.println(" ------------------------------------------------------------- ");
		    		
		    		while( ( record = br.readLine() ) != null ) {
		    			
		    			StringTokenizer st = new StringTokenizer(record,",");
		    			if( record.contains(ID) ) {
		    				System.out.println("|	"+st.nextToken()+"	"+st.nextToken()+" 		"+st.nextToken()+"			"+st.nextToken()+"      |");
		    			}
		    			
		    		}	    		
		    		System.out.println("|	                                            	          |");
		    		System.out.println(" ------------------------------------------------------------- ");
		    		
		    	br.close();
			/**/    	   
	    		System.out.println("Enter the new Name: ");
	    		newName = strInput.nextLine();    		
	    		System.out.println("Enter the new Age: ");
	    		newAge = strInput.nextLine();  
	    		System.out.println("Enter the new Address: ");
	    		newAddr = strInput.nextLine();  
	    		
	    		BufferedReader br2 = new BufferedReader( new FileReader(db) );
	    			
	    		while( (record2 = br2.readLine() ) != null ) {    			
	    			if(record2.contains(ID)) {
	    				bw.write(ID+","+newName+","+newAge+","+newAddr);
	    			} else {
	    			
	    				bw.write(record2);	
	    			}    			
	    			bw.flush();
	    			bw.newLine();
	    		}
	    		
	    		bw.close();
	    		br2.close();    		
	    		db.delete();    		
	    		boolean success = tempDB.renameTo(db);    		
	    		System.out.println(success);    		
	    		
	    }
	  

}


OUTPUT:

Employee Information System


1 ===> Add New Employee Record 
2 ===> View All Employee Record 
3 ===> Delete Employee Record 
4 ===> Search Specific Record 
5 ===> Update Specific Record 


Enter your choice: 
1
Enter the Employee ID: 243
Enter the Employee Name: sadana nandini
Enter the Employee Age: 21
Enter the Employee Address: nellore
Do you want to continue? Y/N
y
		 Employee Information System


1 ===> Add New Employee Record 
2 ===> View All Employee Record 
3 ===> Delete Employee Record 
4 ===> Search Specific Record 
5 ===> Update Specific Record 


Enter your choice: 
2
 ------------------------------------------------------------- 
|	ID		Name 				Age			Address 		  |
 ------------------------------------------------------------- 
|	243	sadana nandini 		21			nellore      |
|	                                            	          |
 ------------------------------------------------------------- 
Do you want to continue? Y/N
n



FIXS BUGS:

SOURCE CODE:

package assignments;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class FixesBugs {
	public static void main(String[] args) {
        //System.out.println("Hello World!");/
System.out.println("\n******\n");
System.out.println("\tWelcome to TheDesk \n");
System.out.println("******");
optionsSelection();

    }
    private static void optionsSelection() {
String[] arr = {"1. I wish to review my expenditure",
                "2. I wish to add my expenditure",
                "3. I wish to delete my expenditure",
                "4. I wish to sort the expenditures",
                "5. I wish to search for a particular expenditure",
                "6. Close the application"
        };
int[] arr1 = {1,2,3,4,5,6};
int  slen = arr1.length;
for(int i=0; i<slen;i++){
System.out.println(arr[i]);
            // display the all the Strings mentioned in the String array
        }
ArrayList<Integer>arrlist = new ArrayList<Integer>();
ArrayList<Integer> expenses = new ArrayList<Integer>();
expenses.add(1000);
expenses.add(2300);
expenses.add(45000);
expenses.add(32000);
expenses.add(110);
expenses.addAll(arrlist);
System.out.println("\nEnter your choice:\t");
        Scanner sc = new Scanner(System.in);
int  options =  sc.nextInt();
for(int j=1;j<=slen;j++){
            if(options==j){
                switch (options){
                    case 1:
System.out.println("Your saved expenses are listed below: \n");
System.out.println(expenses+"\n");
optionsSelection();
                        break;
                    case 2:
System.out.println("Enter the value to add your Expense: \n");
                        int value = sc.nextInt();
expenses.add(value);
System.out.println("Your value is updated\n");
expenses.addAll(arrlist);
System.out.println(expenses+"\n");
optionsSelection();

                        break;
                    case 3:
System.out.println("You are about the delete all your expenses! \nConfirm again by selecting the same option...\n");
                        int con_choice = sc.nextInt();
                        if(con_choice==options){
expenses.clear();
System.out.println(expenses+"\n");
System.out.println("All your expenses are erased!\n");
                        } else {
System.out.println("Oops... try again!");
                        }
optionsSelection();
                        break;
                    case 4:
sortExpenses(expenses);
optionsSelection();
                        break;
                    case 5:
searchExpenses(expenses);
optionsSelection();
                        break;
                    case 6:
closeApp();
                        break;
                    default:
System.out.println("You have made an invalid choice!");
                        break;
                }
            }
        }

    }
    private static void closeApp() {
System.out.println("Closing your application... \nThank you!");
            }
    private static void searchExpenses(ArrayList<Integer>arrayList) {
        int leng = arrayList.size();
System.out.println("Enter the expense you need to search:\t");
        //
        Scanner sc = new Scanner(System.in);
        int input = sc.nextInt();
        //Linear Search
for(int i=0;i<leng;i++) {
	if(arrayList.get(i)==input) {
		System.out.println("Found the expense " + input + " at " + i + " position");
	}
        }
    }
    private static void sortExpenses(ArrayList<Integer>arrayList) {
        int arrlength=  arrayList.size();
       //Complete the method. The expenses should be sorted in ascending order.

Collections.sort(arrayList);
System.out.println("Sorted expenses: ");
for(Integer i: arrayList) {
	System.out.print(i + " ");
        }

System.out.println("\n");

    }
}

OUTPUT:

******

	Welcome to TheDesk 

******
1. I wish to review my expenditure
2. I wish to add my expenditure
3. I wish to delete my expenditure
4. I wish to sort the expenditures
5. I wish to search for a particular expenditure
6. Close the application

Enter your choice:	
4
Sorted expenses: 
110 1000 2300 32000 45000 

1. I wish to review my expenditure
2. I wish to add my expenditure
3. I wish to delete my expenditure
4. I wish to sort the expenditures
5. I wish to search for a particular expenditure
6. Close the application

Enter your choice:	
1
Your saved expenses are listed below: 

[1000, 2300, 45000, 32000, 110]

1. I wish to review my expenditure
2. I wish to add my expenditure
3. I wish to delete my expenditure
4. I wish to sort the expenditures
5. I wish to search for a particular expenditure
6. Close the application

Enter your choice:	
6
Closing your application... 
Thank you!

LONGEST INCREASING SEQENCES:

SOURCE CODE:

package assignments;

public class LongestIncreasingSubsequences {
	 static int max_ref; // stores the LIS

		static int _lis(int arr[], int n)
		{

			if (n == 1)
				return 1;

			int res, max_ending_here = 1;

			
			for (int i = 1; i < n; i++) {
				res = _lis(arr, i);
				if (arr[i - 1] < arr[n - 1]
					&& res + 1 > max_ending_here)
					max_ending_here = res + 1;
			}

			
			if (max_ref < max_ending_here)
				max_ref = max_ending_here;

			
			return max_ending_here;
		}

		
		static int lis(int arr[], int n)
		{
			
			max_ref = 1;

			
			_lis(arr, n);

			
			return max_ref;
		}

		
		public static void main(String args[])
		{
			int arr[] = { 10, 22, 9, 33, 21, 50, 41, 60 };
			int n = arr.length;
			System.out.println("Length of lis is " + lis(arr, n)
							+ "\n");
		}
	}


OUTPUT:

Length of lis is 5



VALIDATION OF EMAIL ID:

SOURCE CODE:

package assignments;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class Emailid {	
		   public static boolean isValidEmail(String email) {
			   String regex = "^(.+)@(.+)$";
			 ///initialize the Pattern object
		       Pattern pattern = Pattern.compile(regex);
		       Matcher matcher = pattern.matcher(email);
		       return matcher.matches();		       
		   }
  public static void main(String[] args) {
		       List<String> emails = new ArrayList<String>();
		       /// valid email addresses
		       emails.add("nandinisadana@example.com");
		       
		       emails.add("asha.kandula@example.me.org");
		       //invalid email addresses
		       emails.add("harika@example.com");
		       
		       emails.add("bhavya..sree@example.com");
		       
		       emails.add("yamini@.example.com");

		       for (String value : emails) {
		           System.out.println("The Email address " + value + " is:" + (isValidEmail(value) ? "valid" : "invalid"));
		       }		       
		       System.out.println("ENTER YOUR MAIL TO CHECK :");
		       try (Scanner sc = new Scanner(System.in)) {
				String input = sc.nextLine();				   System.out.println("The Email Address " + input + " is:" + (isValidEmail(input) ? "valid" : "invalid"));
			}
		       
		   }
		   
}

OUTPUT:

The Email address nandinisadana@example.com is:valid
The Email address asha.kandula@example.me.org is:valid
The Email address harika@example.com is:valid
The Email address bhavya..sree@example.com is:valid
The Email address yamini@.example.com is:valid
ENTER YOUR MAIL TO CHECK :
naninisadana@example.com
The Email Address naninisadana@example.com is:valid


