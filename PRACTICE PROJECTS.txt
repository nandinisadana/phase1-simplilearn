PRACTICE PROJECTS:

PROJECT 1:  AUTOMATION WEB APPLICATION
 
REDIFFDEMO:
package com.qa.SeleniumScripts;
 
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
 
public class RediffDemo {
 
	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		
 
		WebDriver driver = new ChromeDriver();
		
		driver.manage().window().maximize();
		
		driver.get("http://register.rediff.com/register/register.php?FormName=user_details");
		
	//	driver.findElements(By.xpath("//input[@type='text']")).get(0).sendKeys("hari");
		
	driver.findElement(By.xpath("(//input[@type='text'])[1]")).sendKeys("hari gadhe");
	Thread.sleep(2000);
	
	driver.findElement(By.xpath("(//input[@type='text'])[2]")).sendKeys("admin123");
	Thread.sleep(2000);
	
	driver.findElement(By.xpath("(//input[@type='button'])[1]")).click();
	Thread.sleep(2000);
	
	driver.findElement(By.xpath("(//input[@type='password'])[1]")).sendKeys("password@123");
 
	}
 
}
 
 
CSSS SELECTOR DEMO:
package com.qa.SeleniumScripts;
 
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
 
public class CSSSelectorDemo {
 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
        WebDriver driver = new ChromeDriver();
        
        driver.manage().window().maximize();
		
		driver.get("https://www.facebook.com");
		
		// 1. find element using tag and id ==> tagname#idvalue
		
		driver.findElement(By.cssSelector("input#first_name")).sendKeys("hari");
		
		//driver.findElement(By.cssSelector("input.required")).sendKeys("Gadhe");
		
        driver.findElement(By.cssSelector("input[name=last_name]")).sendKeys("Gadhe");
	}
 
}
 
 
WEB ELEMENT DEMO:
package com.qa.SeleniumScripts;
 
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
 
public class WebelementDemo {
 
	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		
		
WebDriver driver = new ChromeDriver();
		
		driver.get("https://www.wikipedia.org/");
		
		driver.manage().window().maximize();
		
		// store the location of the element in an object of type WebElement
		
	WebElement	e1 = driver.findElement(By.id("searchInput"));
	
	     e1.isDisplayed();
	     e1.isEnabled();
	     e1.sendKeys("Automation testing");
	     Thread.sleep(3000);
	// Name locator
	     
	 WebElement e2 =  driver.findElement(By.name("search")) ;  
	     
	 e2.clear();
	 e2.sendKeys("New data for automation");
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
			
			
 
	}
 
}
 
 
XPATH DEMO:
package com.qa.SeleniumScripts;
 
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
 
public class XPATHDemo {
 
	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		
		
		WebDriver driver = new ChromeDriver();
		
		driver.get("https://www.wikipedia.org/");
		
		// Find an element using XPATH locator
		
		// XPATh : Relative XPATH : //tag[@attribute='value']
		 
		
		driver.findElement(By.xpath("//input[@name='search']")).sendKeys("findelement");
		
		// element 2 to click on button
		
		Thread.sleep(2000);
		
		driver.findElement(By.xpath("//button[@type='submit']")).click();
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
 
	}
 
}
 
 
LINKS DEMO:
package com.qa.SeleniumScripts;
 
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
 
public class LinksDemo {
 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		WebDriver driver = new ChromeDriver();
		
		driver.get("https://www.wikipedia.org/");
		
		driver.manage().window().maximize();
		
		driver.manage().deleteAllCookies();
		
		driver.findElement(By.xpath("//*[@id='searchInput']")).sendKeys("Testing");
		
		driver.findElement(By.cssSelector("button[type=submit]")).click();
		
		// click on the link
		
	WebElement li=	driver.findElement(By.linkText("Current events"));
 
	li.isDisplayed();
	li.isEnabled();
	li.click();
	
	
	driver.findElement(By.partialLinkText("Log")).click();
	
	
	driver.close();
	
	
	
	
	
	
	
	
	
	
	
	
	}
 
}
 
LOCATORS ID:
package com.qa.SeleniumScripts;
 
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
 
public class LocatorsID {
 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		WebDriver driver = new ChromeDriver();
		
		driver.get("https://www.wikipedia.org/");
		
		driver.manage().window().maximize();
		
		// Check if the element is displayed
		
		boolean dis = driver.findElement(By.id("searchInput")).isDisplayed();
 
		System.out.println("IS the element displayed ?" + dis);
		
		// check if the element is enabled or not
		
		boolean enb = driver.findElement(By.id("searchInput")).isEnabled();
		
		System.out.println("IS the element enabled ?" + enb);
		
		// Enter data in the webelement - input box
		
		if(enb==true)
		{
		driver.findElement(By.id("searchInput")).sendKeys("Automation testing");
		}
		else
		{
			System.out.println("textbox is not enabled");
		}
		
		
		
		
		
		
		
		
		
		
		
		
	}
 
}
 
 
LOCATOR TAGS:
package com.qa.SeleniumScripts;
 
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
 
public class Locatortag {
 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
WebDriver driver = new ChromeDriver();
		
		driver.get("https://www.wikipedia.org/");
		
		driver.manage().window().maximize();
		
		// wherever out attribute value is not unique, then go for findElements & get
		
		driver.findElements(By.tagName("input")).get(2).sendKeys("data");
		
		
 
	}
 
}
 
NAVIGATION METHOD:
package com.qa.SeleniumScripts;
 
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
 
public class NavigationMethods {
 
	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		
		
		WebDriver driver = new ChromeDriver();
		
		driver.manage().window().maximize();
		
		driver.manage().deleteAllCookies();
		
		driver.get("https://www.wikipedia.org/");
		
		String expctedtitle= "Wikipedia123";
		
		String actualtitle = driver.getTitle(); // will fetch the title of the page
		
		if(expctedtitle.equals(actualtitle))
		{
			System.out.println("title of the page is correct");
		}
		else {
			System.out.println("title of the page is not correct");
		}
	
		
		driver.navigate().to("https://www.selenium.dev/downloads/");
		
String title1 = driver.getTitle(); // will fetch the title of the page
		
		System.out.println("Title of Page2 =" + title1);
		
		driver.navigate().back(); // navigates back to previous url
		
		Thread.sleep(2000);
		
		driver.navigate().forward();
		
		Thread.sleep(2000);
		
		driver.close();
		
 
	}
 
}
 
 
SETUP CHECK:
package com.qa.SeleniumScripts;
 
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
 
public class SetUpcheck {
	
	public static void main(String [] args) throws InterruptedException
	{
		// WebDriver
		
		// can open a chrome browser window
		
		WebDriver driver = new  ChromeDriver();
		
		// Maxamize the browser window
		
		driver.manage().window().maximize();
		
		// Open a webpage-URL on the browser
		
		driver.get("https://www.wikipedia.org/");
		
	
		
		// do some testing
		
		//Close the browser window
		
		Thread.sleep(2000); // add wait time before closing the window
		
		driver.close(); // will close that particular browser window
		
		
	
		
	}
 
}



PROJECT 2:    AUTOMATION WEB APPLICATION USING TESTNG


ANNOTATIONS:
Page:
package com.demo.seleniumspring.annotation;
 
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
 
import java.lang.annotation.*;
 
@Lazy
@Component
@Scope("prototype") // to create new instances of bean instead of sharing; helps during parallel runs
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface Page {
}
 
 
Page Fragment:
package com.demo.seleniumspring.annotation;
 
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
 
import java.lang.annotation.*;
 
@Lazy
@Component
@Scope("prototype") // to create new instances of bean instead of sharing; helps during parallel runs
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface PageFragment {
}
 
 
CONFIG:
Browser Scope:
package com.demo.seleniumspring.config;
 
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.SessionId;
import org.springframework.beans.factory.ObjectFactory;
import org.springframework.context.support.SimpleThreadScope;
 
import java.util.Objects;
 
// custom scope to prevent multiple browsers from launching
// see video: https://bah.udemy.com/course/cucumber-with-spring-boot/learn/lecture/20184630#overview
public class BrowserScope extends SimpleThreadScope {
 
    @Override
    public Object get(String name, ObjectFactory<?> objectFactory) {
        return super.get(name, objectFactory);
        // Object o = super.get(name, objectFactory);
        //
        // SessionId sessionId = ((RemoteWebDriver)o).getSessionId();
        // if (Objects.isNull(sessionId)){
        //     super.remove(name);
        //     super.get(name,objectFactory);
        // }
        // return o;
    }
 
    @Override
    public void registerDestructionCallback(String name, Runnable callback) {
    }
}
 
 
Browser Scope Config:
package com.demo.seleniumspring.config;
 
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
 
// this is how spring boot reads custom scope
@Configuration
public class BrowserScopeConfig {
 
    @Bean
    public static BeanFactoryPostProcessor beanFactoryPostProcessor(){
        return new BrowserScopePostProcessor();
    }
}
 
 
Browser Scope Post Processer:
package com.demo.seleniumspring.config;
 
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
 
// registers new scope created: BrowserScope.java
public class BrowserScopePostProcessor implements BeanFactoryPostProcessor {
    @Override
    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        beanFactory.registerScope("browserscope", new BrowserScope());
 
    }
}
 
 
Remote Web Driver Config:
package com.demo.seleniumspring.config;
 
import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Profile;
 
import java.net.URL;
 
// for selenium grid run; this will be the remote profile
@Lazy
@Configuration
@Profile("remote") // only activate this class if remote profile
public class RemoteWebDriverConfig {
 
    @Value("${selenium.grid.url}")
    private URL url;
 
 
    @Bean
    @ConditionalOnProperty(name = "browser", havingValue = "firefox")
    public WebDriver remoteFirefoxDriver(){
        return new RemoteWebDriver(this.url, DesiredCapabilities.firefox());
    }
 
    @Bean
    @ConditionalOnMissingBean // to catch invalid browser values
    public WebDriver remoteChromeDriver(){
        return new RemoteWebDriver(this.url, DesiredCapabilities.chrome());
    }
 
}
 
 
Web Driver Config:
package com.demo.seleniumspring.config;
 
import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.*;
 
@Configuration
@Profile("!remote") // to avoid loading for remote runs
public class WebDriverConfig {
 
    @Bean
    @ConditionalOnProperty(name = "browser", havingValue = "edge")
    public WebDriver edgeDriver() {
        // this is the bean class for edge driver
 
        if (System.getenv("CLOUD_RUN_FLAG") == null) {
            WebDriverManager.edgedriver().setup();
        }
        return new EdgeDriver();
    }
 
    @Bean
    // @Primary // this will be the default browser
    @ConditionalOnMissingBean // to catch invalid browser values
    @Scope("browserscope") // use custom scope
    public WebDriver chromeDriver() {
        // this is the bean class for chrome driver
 
        if (System.getenv("CLOUD_RUN_FLAG") == null) {
            WebDriverManager.chromedriver().setup();
           return new ChromeDriver();
        } else {
            WebDriverManager.chromedriver().setup();
            ChromeOptions options = new ChromeOptions();
            options.addArguments("--no-sandbox");
            options.addArguments("--headless");
            return new ChromeDriver(options = options);
        }
    }
 
 
}
 
 
Web Driver Wait Config:
package com.demo.seleniumspring.config;
 
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
 
@Lazy
@Configuration
public class WebDriverWaitConfig {
 
    @Value("${default.timeout:30}")
    private  int timeout;
 
    @Bean
    public WebDriverWait webDriverWait(WebDriver driver) {
        return new WebDriverWait(driver, this.timeout);
    }
}
 
 
PAGE:
Google Page:
package com.demo.seleniumspring.page.google;
 
import com.demo.seleniumspring.annotation.Page;
import com.demo.seleniumspring.page.Base;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
 
// this is the main page class that uses search componet and search results componet
@Page // using custom annotation created; src/main/java/com/demo/seleniumspring/annotation/Page.java
public class GooglePage extends Base {
 
    @Autowired
    private SearchComponent searchComponent;
 
    @Autowired
    private SearchResult searchResult;
 
    @Value("${application.url}")
    private String url;
 
    //launch website
    public void goToGooglePage(){
        this.driver.get(url);
    }
 
    public SearchComponent getSearchComponent() {
        return searchComponent;
    }
 
    public SearchResult getSearchResult() {
        return searchResult;
    }
 
    @Override
    public boolean isAt() {
        return this.searchComponent.isAt();
    }
 
    public void close(){
        this.driver.quit();
    }
}
 
 
Search Component:
package com.demo.seleniumspring.page.google;
 
import com.demo.seleniumspring.annotation.PageFragment;
import com.demo.seleniumspring.page.Base;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
 
import java.util.List;
 
@PageFragment// using custom annotation created; src/main/java/com/demo/seleniumspring/annotation/PageFragment.java
public class SearchComponent extends Base {
 
    @FindBy(name = "q")
    private WebElement searchBox;
 
    @FindBy(name="btnK")
    private List<WebElement> searchBtns;
 
    public void search(final String keyword) {
        this.searchBox.sendKeys(keyword);
        this.searchBox.sendKeys(Keys.TAB);
        // CLICK first search button
        this.searchBtns
                .stream()
                .filter(e -> e.isDisplayed() && e.isEnabled())
                .findFirst()
                .ifPresent(WebElement::click);
    }
 
    @Override
    public boolean isAt() {
        return this.wait.until(driver1 -> this.searchBox.isDisplayed());
    }
}
 
 
Search Result:
package com.demo.seleniumspring.page.google;
 
import com.demo.seleniumspring.annotation.PageFragment;
import com.demo.seleniumspring.page.Base;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
 
import java.util.List;
 
@PageFragment// using custom annotation created; src/main/java/com/demo/seleniumspring/annotation/PageFragment.java
public class SearchResult extends Base {
 
    @FindBy(css = "div.g")
    private List<WebElement> results;
 
    public int getCount() {
        return this.results.size();
    }
 
    @Override
    public boolean isAt() {
        return this.wait.until((d) -> !this.results.isEmpty());
    }
}
 
Base:
package com.demo.seleniumspring.page;
 
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Autowired;
 
import javax.annotation.PostConstruct;
 
public abstract class Base {
 
    @Autowired
    protected WebDriver driver;
 
    @Autowired
    protected WebDriverWait wait;
 
    @PostConstruct
    private void init(){
        PageFactory.initElements(this.driver, this);
    }
 
    public abstract boolean isAt();
 
 
}
 
UTIL:
ScreenShot Util:
package com.demo.seleniumspring.util;
 
import org.apache.commons.lang3.ObjectUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.springframework.util.FileCopyUtils;
 
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
 
@Lazy
@Component
public class ScreenShotUtil {
 
    @Autowired
    private TakesScreenshot driver;
 
    // location of screenshot file
    @Value("${screenshot.path}")
    private Path path;
 
    public void takeScreenShot(final String imgName) throws IOException {
        // takes screenshot as saves to path in app properties file using given imgName ex. test.png
        if (System.getenv("CLOUD_RUN_FLAG") == null) {
            try {
                File sourceFile = this.driver.getScreenshotAs(OutputType.FILE);
                FileCopyUtils.copy(sourceFile, this.path.resolve(imgName).toFile());
                System.out.println("Saving screenshot to " + path);
            } catch (Exception e) {
                System.out.println("Something went wrong with screenshot capture" + e);
            }
        }
 
 
    }
}
 
SELENIUM SPRING APPLICATION:
package com.demo.seleniumspring;
 
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
 
@SpringBootApplication
public class SeleniumSpringApplication {
 
	public static void main(String[] args) {
		SpringApplication.run(SeleniumSpringApplication.class, args);
	}
 
}
 
 
TEST:
GoogleSearch01 Test:
package com.demo.seleniumspring.googletests;
 
import com.demo.seleniumspring.SpringBaseTestNGTest;
import com.demo.seleniumspring.page.google.GooglePage;
import com.demo.seleniumspring.util.ScreenShotUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.testng.Assert;
import org.testng.annotations.Test;
 
import java.io.IOException;
 
public class GoogleSearch1Test extends SpringBaseTestNGTest {
 
    @Autowired
    private GooglePage googlePage;
 
    @Lazy // only create the object when needed
    @Autowired
    private ScreenShotUtil screenShotUtil;
 
    @Test
    public void GoogleTest() throws IOException, InterruptedException {
        this.googlePage.goToGooglePage();
        Assert.assertTrue(this.googlePage.isAt());
 
        this.googlePage.getSearchComponent().search("spring boot");
        Assert.assertTrue(this.googlePage.getSearchResult().isAt());
        Assert.assertTrue(this.googlePage.getSearchResult().getCount() > 2);
        System.out.println("Number of Results: " + this.googlePage.getSearchResult().getCount());
        // wait 3 seconds
        // Thread.sleep(3000);
        //take screenshot
        //this.screenShotUtil.takeScreenShot("Test.png");
        //this.googlePage.close();
    }
}
GoogleSearch02 Test:
package com.demo.seleniumspring.googletests;
 
import com.demo.seleniumspring.SpringBaseTestNGTest;
import com.demo.seleniumspring.page.google.GooglePage;
import com.demo.seleniumspring.util.ScreenShotUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.testng.Assert;
import org.testng.annotations.Test;
 
import java.io.IOException;
 
public class GoogleSearch2Test extends SpringBaseTestNGTest {
 
    @Autowired
    private GooglePage googlePage;
 
    @Lazy // only create the object when needed
    @Autowired
    private ScreenShotUtil screenShotUtil;
 
    @Test
    public void GoogleTest() throws IOException, InterruptedException {
        this.googlePage.goToGooglePage();
        Assert.assertTrue(this.googlePage.isAt());
 
        this.googlePage.getSearchComponent().search("Selenium");
        Assert.assertTrue(this.googlePage.getSearchResult().isAt());
        Assert.assertTrue(this.googlePage.getSearchResult().getCount() > 2);
        System.out.println("Number of Results: " + this.googlePage.getSearchResult().getCount());
        // wait 3 seconds
        // Thread.sleep(3000);
        //take screenshot
        //this.screenShotUtil.takeScreenShot("Test.png");
        //this.googlePage.close();
    }
}
 
Selenium Application Test:
package com.demo.seleniumspring;
 
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
 
@SpringBootTest
class SeleniumSpringApplicationTests {
 
	@Test
	void contextLoads() {
	}
 
}
 
 
Spring Base Test Ng Test:
package com.demo.seleniumspring;
 
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
 
@SpringBootTest
public class SpringBaseTestNGTest extends AbstractTestNGSpringContextTests {
}
 




 
 PROJECT 3:   DEPLOYE APLLICATION ON CLOUD

MAIN:
package com.example.demo;
 
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
 
@SpringBootApplication
@RestController
public class SpringBootAwsApplication {
	@GetMapping("/")
	public String home() {
		return "Welcome to AWS First Deployment...     DEPLOY SPRINGBOOT TO AWS";
	}
	public static void main(String[] args) {
		SpringApplication.run(SpringBootAwsApplication.class, args);
	}
 
}
 
 
SPRINGBOOT APPLICATION TEST:
package com.example.demo;
 
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
 
@SpringBootTest
class SpringBootAwsApplicationTests {
 
	@Test
	void contextLoads() {
	}
 
}
 

PROJECT 4:   JENKINS PIPELINE TO DOCKER SWARM


<!DOCTYPE html>
<html>
<head>
  <title>Provisioning Test Page</title>
  <link href="https://fonts.googleapis.com/css?family=Slabo+27px" rel="stylesheet">
  <style type="text/css">
    body {
      text-align:center;
      font-family: 'Slabo 27px', serif;
      height:100vh;
    }
 
    .vertical-center {
 
      position:relative;
      top:50%;
      transform: translateY(-50%);
 
    }
 
    img {
      width:100px;
    }
  </style>
</head>
<body>
  <div class="vertical-center">
    <h1>Fibonacci Generator</h1>
 
 
    <p>The number at position <%= index %> is <%= value %></p>
    <img src="https://cdn.worldvectorlogo.com/logos/docker.svg" />
  </div>
</body>
</html>
HACKABLE:
<!DOCTYPE html>
<html>
<head>
  <title>Provisioning Test Page</title>
  <link href="https://fonts.googleapis.com/css?family=Slabo+27px" rel="stylesheet">
  <style type="text/css">
    body {
      text-align:center;
      font-family: 'Slabo 27px', serif;
      height:100vh;
    }
 
    .vertical-center {
 
      position:relative;
      top:50%;
      transform: translateY(-50%);
 
    }
 
    img {
      width:100px;
    }
 
    #command {
      width:50%;
      display: inline-block; 
    }
 
    #stdout {
      width:50%;
      display: inline-block; 
    }
  </style>
</head>
<body>
  <div class="vertical-center">
 
    <img src="/images/logo.png" />
    <h1>Hackable: Code Injection</h1>
 
    <p>The following command was run on the server!</p>
    <code id="command">
      <%= command %>
    </code>
    <p>This was the result</p>
    <code id="stdout">
      <%= stdout %>
    </code>
  </div>
</body>
</html>
 
POSTS:
<!DOCTYPE html>
<html>
<head>
  <title>Provisioning Test Page</title>
  <link href="https://fonts.googleapis.com/css?family=Slabo+27px" rel="stylesheet">
  <style type="text/css">
    body {
      font-family: 'Slabo 27px', serif;
      height:100vh;
    }
 
    img {
      width:100px;
    }
 
    .blog {
      padding:50px;
    }
 
    .post {
      padding:20px;
    }
  </style>
</head>
<body>
  <div class="blog">
    <img src="https://cdn.worldvectorlogo.com/logos/docker.svg" />
    <h1>Recent Posts</h1>
    <hr/>
 
    <% posts.forEach(function(post){ %>
    <div class="post">
      <h3><%= post.title %></h3>
      <p><%= post.body %></p>
    </div>
    <% }) %>
  </div>
</body>
</html>
 
JENKINSFILES:
pipeline {
    environment {
    registry = "naistangz/docker_automation"
    registryCredential = "dockerhub"
    dockerImage = ''
    PATH = "$PATH:/usr/local/bin"
}
 
    agent {
        'docker'}
    stages {
            stage('Cloning our Git') {
                steps {
                git 'https://github.com/naistangz/Docker_Jenkins_Pipeline.git'
                }
            }
 
            stage('Building Docker Image') {
                steps {
                    script {
                        dockerImage = docker.build registry + ":$BUILD_NUMBER"
                    }
                }
            }
 
            stage('Deploying Docker Image to Dockerhub') {
                steps {
                    script {
                        docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                        }
                    }
                }
            }
 
            stage('Cleaning Up') {
                steps{
                  sh "docker rmi $registry:$BUILD_NUMBER"
                }
            }
        }
    }
 

 PROJECT 5:    Deploying ELK Stack on Docker Container
 
Create Spring REST Project
package com.example.howtodoinjava.hellodocker;
 
import java.util.Date;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
 
@SpringBootApplication
public class HelloDockerApplication {
 
    public static void main(String[] args) {
        SpringApplication.run(HelloDockerApplication.class, args);
    }
}
 
@RestController
class HelloDockerRestController {
    @RequestMapping("/hello/{name}")
    public String helloDocker(@PathVariable(value = "name") String name) {
        String response = "Hello " + name + " Response received on : " + new Date();
System.out.println(response);
        return response;
 
    }
}
 
application.properties :
server.port = 9080
 
Dockerfile
FROM openjdk:8-jdk-alpine
VOLUME /tmp
ADD target/hello-docker-0.0.1-SNAPSHOT.jar hello-docker-app.jar
ENV JAVA_OPTS=""
ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /hello-docker-app.jar" ]
 
pom.xml 
<plugin>
    <groupId>com.spotify</groupId>
    <artifactId>dockerfile-maven-plugin</artifactId>
    <version>1.3.4</version>
    <configuration>
        <repository>${docker.image.prefix}/${project.artifactId}</repository>
    </configuration>
</plugin>
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-dependency-plugin</artifactId>
    <executions>
        <execution>
            <id>unpack</id>
            <phase>package</phase>
            <goals>
                <goal>unpack</goal>
            </goals>
            <configuration>
                <artifactItems>
                    <artifactItem>
                        <groupId>${project.groupId}</groupId>
                        <artifactId>${project.artifactId}</artifactId>
                        <version>${project.version}</version>
                    </artifactItem>
                </artifactItems>
            </configuration>
        </execution>
    </executions>
</plugin>
 
SpringBootDemoApplication.java
 
import java.util.Arrays;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;
import org.springframework.context.ApplicationContext;
 
@SpringBootApplication (exclude = SecurityAutoConfiguration.class)
public class SpringBootDemoApplication {
   public static void main(String[] args) 
   {
      ApplicationContext ctx = SpringApplication.run(SpringBootDemoApplication.class, args);
 
        String[] beanNames = ctx.getBeanDefinitionNames();
        Arrays.sort(beanNames);
        for (String beanName : beanNames) 
        {
            System.out.println(beanName);
        }
   }
}
 
EmployeeController.java
 
import java.util.ArrayList;
import java.util.List;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.howtodoinjava.demo.model.Employee;
 
@RestController
public class EmployeeController 
{
   @RequestMapping("/")
    public List<Employee> getEmployees() 
{
      List<Employee> employeesList = new ArrayList<Employee>();
      employeesList.add(new Employee(1,"lokesh","gupta","howtodoinjava@gmail.com"));
      return employeesList;
    }
}
 
Employee.java
public class Employee {
   public Employee() {
   }
   public Employee(Integer id, String firstName, String lastName, String email) {
      super();
      this.id = id;
      this.firstName = firstName;
      this.lastName = lastName;
      this.email = email;
   }
private Integer id;
   private String firstName;
   private String lastName;
   private String email;
    
   //getters and setters
 
   @Override
   public String toString() {
      return "Employee [id=" + id + ", firstName=" + firstName
            + ", lastName=" + lastName + ", email=" + email + "]";
   }
}
 
ElkExampleSpringBootApplication.java
package com.example.howtodoinjava.elkexamplespringboot;
 
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Date;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
 
@SpringBootApplication
public class ElkExampleSpringBootApplication {
 
    public static void main(String[] args) {
        SpringApplication.run(ElkExampleSpringBootApplication.class, args);
    }
}
 
@RestController
class ELKController {
    private static final Logger LOG = Logger.getLogger(ELKController.class.getName());
 
    @Autowired
    RestTemplate restTemplete;
 
    @Bean
    RestTemplate restTemplate() {
        return new RestTemplate();
    }
 
    @RequestMapping(value = "/elkdemo")
    public String helloWorld() {
        String response = "Hello user ! " + new Date();
        LOG.log(Level.INFO, "/elkdemo - > " + response);
 
        return response;
    }
 
    @RequestMapping(value = "/elk")
    public String helloWorld1() {
 
        String response = restTemplete.exchange("http://localhost:8080/elkdemo", HttpMethod.GET, null, new ParameterizedTypeReference() {
        }).getBody();
        LOG.log(Level.INFO, "/elk - > " + response);
 
        try {
            String exceptionrsp = restTemplete.exchange("http://localhost:8080/exception", HttpMethod.GET, null, new ParameterizedTypeReference() {
            }).getBody();
            LOG.log(Level.INFO, "/elk trying to print exception - > " + exceptionrsp);
            response = response + " === " + exceptionrsp;
        } catch (Exception e) {
            // exception should not reach here. Really bad practice :)
        }
 
        return response;
    }
 
    @RequestMapping(value = "/exception")
    public String exception() {
        String rsp = "";
        try {
            int i = 1 / 0;
            // should get exception
        } catch (Exception e) {
            e.printStackTrace();
            LOG.error(e);
             
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String sStackTrace = sw.toString(); // stack trace as a string
            LOG.error("Exception As String :: - > "+sStackTrace);
             
            rsp = sStackTrace;
        }
 
        return rsp;
    }
}
 
application.properties
logging.file=elk-example.log
spring.application.name = elk-example
Logstash Configuration
input {
  file {
    type => "java"
    path => "F:/Study/eclipse_workspace_mars/elk-example-spring-boot/elk-example.log"
    codec => multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
      negate => "true"
      what => "previous"
    }
  }
}
 
filter {
  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace
  if [message] =~ "\tat" {
    grok {
      match => ["message", "^(\tat)"]
      add_tag => ["stacktrace"]
    }
  }
 
 grok {
    match => [ "message", 
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)",
               "message",
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)"
             ]
  }
 
  
  date {
    match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
  }
}
 
output {
   
  stdout {
    codec => rubydebug
  }
 
  # Sending properly parsed log events to elasticsearch
  elasticsearch {
    hosts => ["localhost:9200"]
  }
}
 
Kibana Configuration
pipeline {
    agent {
        docker {
            image 'maven:3-alpine' 
            args '-v /root/.m2:/root/.m2' 
        }
    }
    stages {
        stage('Build') { 
            steps {
                sh 'mvn -B -DskipTests clean package' 
            }
      }
	    }
}
 
test stage to your Pipeline
	stage('Test') {
           	steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
 
pipeline {
    agent {
        docker {
            image 'maven:3-alpine'
            args '-v /root/.m2:/root/.m2'
        }
    }
    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') { 
            steps {
                sh 'mvn test' 
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml' 
                }
		}
        }
    }
}
 
 
 
Test stage of your Jenkinsfile:
 
1.        stage('Deliver') {
2.            steps {
3.                sh './jenkins/scripts/deliver.sh'
4.            }
        }
and add a skipStagesAfterUnstable option so that you end up with:
pipeline {
    agent {
        docker {
            image 'maven:3-alpine'
            args '-v /root/.m2:/root/.m2'
        }
    }
    options {
        skipStagesAfterUnstable()
    }
    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') { 
            steps {
                sh './jenkins/scripts/deliver.sh' 
            }
        }
    }
}
 
 




 
 
